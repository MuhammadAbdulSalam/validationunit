// Generated by Dagger (https://dagger.dev).
package com.sagoss.validationtesting.backgroundsync.workerfactory;

import com.sagoss.validationtesting.api.repository.ApiResponseRepository;
import com.sagoss.validationtesting.apitwo.repositiory.ApiTwoResponseRepository;
import com.sagoss.validationtesting.database.repository.DBRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CustomWorkFactory_Factory implements Factory<CustomWorkFactory> {
  private final Provider<DBRepository> dbRepoProvider;

  private final Provider<ApiTwoResponseRepository> apiTwoResponseRepositoryProvider;

  private final Provider<ApiResponseRepository> apiResponseRepositoryProvider;

  public CustomWorkFactory_Factory(Provider<DBRepository> dbRepoProvider,
      Provider<ApiTwoResponseRepository> apiTwoResponseRepositoryProvider,
      Provider<ApiResponseRepository> apiResponseRepositoryProvider) {
    this.dbRepoProvider = dbRepoProvider;
    this.apiTwoResponseRepositoryProvider = apiTwoResponseRepositoryProvider;
    this.apiResponseRepositoryProvider = apiResponseRepositoryProvider;
  }

  @Override
  public CustomWorkFactory get() {
    return newInstance(dbRepoProvider.get(), apiTwoResponseRepositoryProvider.get(), apiResponseRepositoryProvider.get());
  }

  public static CustomWorkFactory_Factory create(Provider<DBRepository> dbRepoProvider,
      Provider<ApiTwoResponseRepository> apiTwoResponseRepositoryProvider,
      Provider<ApiResponseRepository> apiResponseRepositoryProvider) {
    return new CustomWorkFactory_Factory(dbRepoProvider, apiTwoResponseRepositoryProvider, apiResponseRepositoryProvider);
  }

  public static CustomWorkFactory newInstance(DBRepository dbRepo,
      ApiTwoResponseRepository apiTwoResponseRepository,
      ApiResponseRepository apiResponseRepository) {
    return new CustomWorkFactory(dbRepo, apiTwoResponseRepository, apiResponseRepository);
  }
}
