// Generated by Dagger (https://dagger.dev).
package com.sagoss.validationtesting.viewmodel;

import com.sagoss.validationtesting.api.repository.ApiResponseRepository;
import com.sagoss.validationtesting.apitwo.repositiory.ApiTwoResponseRepository;
import com.sagoss.validationtesting.database.repository.DBRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<ApiResponseRepository> apiOneRepositoryProvider;

  private final Provider<ApiTwoResponseRepository> apiTwoRepositoryProvider;

  private final Provider<DBRepository> dbRepositoryProvider;

  public MainViewModel_Factory(Provider<ApiResponseRepository> apiOneRepositoryProvider,
      Provider<ApiTwoResponseRepository> apiTwoRepositoryProvider,
      Provider<DBRepository> dbRepositoryProvider) {
    this.apiOneRepositoryProvider = apiOneRepositoryProvider;
    this.apiTwoRepositoryProvider = apiTwoRepositoryProvider;
    this.dbRepositoryProvider = dbRepositoryProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(apiOneRepositoryProvider.get(), apiTwoRepositoryProvider.get(), dbRepositoryProvider.get());
  }

  public static MainViewModel_Factory create(
      Provider<ApiResponseRepository> apiOneRepositoryProvider,
      Provider<ApiTwoResponseRepository> apiTwoRepositoryProvider,
      Provider<DBRepository> dbRepositoryProvider) {
    return new MainViewModel_Factory(apiOneRepositoryProvider, apiTwoRepositoryProvider, dbRepositoryProvider);
  }

  public static MainViewModel newInstance(ApiResponseRepository apiOneRepository,
      ApiTwoResponseRepository apiTwoRepository, DBRepository dbRepository) {
    return new MainViewModel(apiOneRepository, apiTwoRepository, dbRepository);
  }
}
