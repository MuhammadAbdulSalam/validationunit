// Generated by Dagger (https://dagger.dev).
package com.sagoss.validationtesting.utils.application;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.hilt.work.HiltWrapper_WorkerFactoryModule;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.sagoss.validationtesting.MainActivity;
import com.sagoss.validationtesting.api.ApiOneRetrofitBuilder;
import com.sagoss.validationtesting.api.apiInterface.ApiHelper;
import com.sagoss.validationtesting.api.repository.ApiResponseRepository;
import com.sagoss.validationtesting.apitwo.ApiTwoRetrofitBuilder;
import com.sagoss.validationtesting.apitwo.apiinterface.ApiTwoHelper;
import com.sagoss.validationtesting.apitwo.repositiory.ApiTwoResponseRepository;
import com.sagoss.validationtesting.database.ValidationDatabase;
import com.sagoss.validationtesting.database.dao.RequestDao;
import com.sagoss.validationtesting.database.dao.VoucherDao;
import com.sagoss.validationtesting.database.repository.DBRepository;
import com.sagoss.validationtesting.ui.fragments.companyviews.c2c.EnterDateToC2cFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.c2c.GreetingsC2cFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.c2c.HotelC2cFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.c2c.NoConfigC2cFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.c2c.PlateRegistrationC2cFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.c2c.ValidationResultsC2cFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.c2c.VoucherC2cFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.greateranglia.EnterDateToGaFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.greateranglia.GreetingsGaFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.greateranglia.HotelGaFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.greateranglia.NoConfigGaFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.greateranglia.PlateRegistrationGaFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.greateranglia.ValidationResultsGaFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.greateranglia.VoucherGaFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.horizon.EnterDateToHorizonFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.horizon.GreetingsHorizonFragmentGreetings;
import com.sagoss.validationtesting.ui.fragments.companyviews.horizon.HotelHorizonFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.horizon.NoConfigHorizonFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.horizon.PlateRegistrationHorizonFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.horizon.ValidationResultsHorizonFragment;
import com.sagoss.validationtesting.ui.fragments.companyviews.horizon.VoucherFragmentHorizon;
import com.sagoss.validationtesting.ui.fragments.loginviews.LoginCheckerFragment;
import com.sagoss.validationtesting.ui.fragments.loginviews.LoginRegistrationFragment;
import com.sagoss.validationtesting.utils.moduleinjector.ModuleInjector;
import com.sagoss.validationtesting.utils.moduleinjector.ModuleInjector_ProvideApiTwoRetrofitServiceFactory;
import com.sagoss.validationtesting.utils.moduleinjector.ModuleInjector_ProvideRequestDaoFactory;
import com.sagoss.validationtesting.utils.moduleinjector.ModuleInjector_ProvideRetrofitServiceFactory;
import com.sagoss.validationtesting.utils.moduleinjector.ModuleInjector_ProvideValidationDBRepositoryFactory;
import com.sagoss.validationtesting.utils.moduleinjector.ModuleInjector_ProvideValidationDatabaseFactory;
import com.sagoss.validationtesting.utils.moduleinjector.ModuleInjector_ProvideVoucherDaoFactory;
import com.sagoss.validationtesting.viewmodel.MainViewModel;
import com.sagoss.validationtesting.viewmodel.MainViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplication_HiltComponents_SingletonC extends Application_HiltComponents.SingletonC {
  private final ModuleInjector moduleInjector;

  private final ApplicationContextModule applicationContextModule;

  private final DaggerApplication_HiltComponents_SingletonC singletonC = this;

  private volatile Object validationDatabase = new MemoizedSentinel();

  private volatile Object apiTwoRetrofitBuilder = new MemoizedSentinel();

  private volatile Object apiTwoHelper = new MemoizedSentinel();

  private volatile Object apiTwoResponseRepository = new MemoizedSentinel();

  private volatile Object apiOneRetrofitBuilder = new MemoizedSentinel();

  private volatile Object apiHelper = new MemoizedSentinel();

  private volatile Object apiResponseRepository = new MemoizedSentinel();

  private DaggerApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam, ModuleInjector moduleInjectorParam) {
    this.moduleInjector = moduleInjectorParam;
    this.applicationContextModule = applicationContextModuleParam;

  }

  public static Builder builder() {
    return new Builder();
  }

  private ValidationDatabase validationDatabase() {
    Object local = validationDatabase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = validationDatabase;
        if (local instanceof MemoizedSentinel) {
          local = ModuleInjector_ProvideValidationDatabaseFactory.provideValidationDatabase(moduleInjector, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          validationDatabase = DoubleCheck.reentrantCheck(validationDatabase, local);
        }
      }
    }
    return (ValidationDatabase) local;
  }

  private VoucherDao voucherDao() {
    return ModuleInjector_ProvideVoucherDaoFactory.provideVoucherDao(moduleInjector, validationDatabase());
  }

  private RequestDao requestDao() {
    return ModuleInjector_ProvideRequestDaoFactory.provideRequestDao(moduleInjector, validationDatabase());
  }

  private DBRepository dBRepository() {
    return ModuleInjector_ProvideValidationDBRepositoryFactory.provideValidationDBRepository(moduleInjector, voucherDao(), requestDao());
  }

  private ApiTwoRetrofitBuilder apiTwoRetrofitBuilder() {
    Object local = apiTwoRetrofitBuilder;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = apiTwoRetrofitBuilder;
        if (local instanceof MemoizedSentinel) {
          local = ModuleInjector_ProvideApiTwoRetrofitServiceFactory.provideApiTwoRetrofitService(moduleInjector);
          apiTwoRetrofitBuilder = DoubleCheck.reentrantCheck(apiTwoRetrofitBuilder, local);
        }
      }
    }
    return (ApiTwoRetrofitBuilder) local;
  }

  private ApiTwoHelper apiTwoHelper() {
    Object local = apiTwoHelper;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = apiTwoHelper;
        if (local instanceof MemoizedSentinel) {
          local = new ApiTwoHelper(apiTwoRetrofitBuilder());
          apiTwoHelper = DoubleCheck.reentrantCheck(apiTwoHelper, local);
        }
      }
    }
    return (ApiTwoHelper) local;
  }

  private ApiTwoResponseRepository apiTwoResponseRepository() {
    Object local = apiTwoResponseRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = apiTwoResponseRepository;
        if (local instanceof MemoizedSentinel) {
          local = new ApiTwoResponseRepository(apiTwoHelper());
          apiTwoResponseRepository = DoubleCheck.reentrantCheck(apiTwoResponseRepository, local);
        }
      }
    }
    return (ApiTwoResponseRepository) local;
  }

  private ApiOneRetrofitBuilder apiOneRetrofitBuilder() {
    Object local = apiOneRetrofitBuilder;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = apiOneRetrofitBuilder;
        if (local instanceof MemoizedSentinel) {
          local = ModuleInjector_ProvideRetrofitServiceFactory.provideRetrofitService(moduleInjector);
          apiOneRetrofitBuilder = DoubleCheck.reentrantCheck(apiOneRetrofitBuilder, local);
        }
      }
    }
    return (ApiOneRetrofitBuilder) local;
  }

  private ApiHelper apiHelper() {
    Object local = apiHelper;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = apiHelper;
        if (local instanceof MemoizedSentinel) {
          local = new ApiHelper(apiOneRetrofitBuilder());
          apiHelper = DoubleCheck.reentrantCheck(apiHelper, local);
        }
      }
    }
    return (ApiHelper) local;
  }

  private ApiResponseRepository apiResponseRepository() {
    Object local = apiResponseRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = apiResponseRepository;
        if (local instanceof MemoizedSentinel) {
          local = new ApiResponseRepository(apiHelper(), dBRepository());
          apiResponseRepository = DoubleCheck.reentrantCheck(apiResponseRepository, local);
        }
      }
    }
    return (ApiResponseRepository) local;
  }

  @Override
  public void injectApplication(Application application) {
    injectApplication2(application);
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  private Application injectApplication2(Application instance) {
    Application_MembersInjector.injectDbRepository(instance, dBRepository());
    Application_MembersInjector.injectApiTwoResponseRepository(instance, apiTwoResponseRepository());
    Application_MembersInjector.injectApiResponseRepository(instance, apiResponseRepository());
    return instance;
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private ModuleInjector moduleInjector;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_WorkerFactoryModule(
        HiltWrapper_WorkerFactoryModule hiltWrapper_WorkerFactoryModule) {
      Preconditions.checkNotNull(hiltWrapper_WorkerFactoryModule);
      return this;
    }

    public Builder moduleInjector(ModuleInjector moduleInjector) {
      this.moduleInjector = Preconditions.checkNotNull(moduleInjector);
      return this;
    }

    public Application_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (moduleInjector == null) {
        this.moduleInjector = new ModuleInjector();
      }
      return new DaggerApplication_HiltComponents_SingletonC(applicationContextModule, moduleInjector);
    }
  }

  private static final class ActivityRetainedCBuilder implements Application_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public Application_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityRetainedCImpl extends Application_HiltComponents.ActivityRetainedC {
    private final DaggerApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl(DaggerApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;


    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private static final class ActivityCBuilder implements Application_HiltComponents.ActivityC.Builder {
      private final DaggerApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private Activity activity;

      private ActivityCBuilder(DaggerApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ActivityCBuilder activity(Activity arg0) {
        this.activity = Preconditions.checkNotNull(arg0);
        return this;
      }

      @Override
      public Application_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
      }
    }

    private static final class ActivityCImpl extends Application_HiltComponents.ActivityC {
      private final DaggerApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ActivityCImpl activityCImpl = this;

      private ActivityCImpl(DaggerApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;


      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
      }

      @Override
      public Set<String> getViewModelKeys() {
        return Collections.<String>singleton(MainViewModel_HiltModules_KeyModule_ProvideFactory.provide());
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      private static final class FragmentCBuilder implements Application_HiltComponents.FragmentC.Builder {
        private final DaggerApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private Fragment fragment;

        private FragmentCBuilder(DaggerApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public FragmentCBuilder fragment(Fragment arg0) {
          this.fragment = Preconditions.checkNotNull(arg0);
          return this;
        }

        @Override
        public Application_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragment);
        }
      }

      private static final class FragmentCI extends Application_HiltComponents.FragmentC {
        private final DaggerApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final FragmentCI fragmentCI = this;

        private FragmentCI(DaggerApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            Fragment fragmentParam) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;


        }

        @Override
        public void injectEnterDateToC2cFragment(EnterDateToC2cFragment enterDateToC2cFragment) {
        }

        @Override
        public void injectGreetingsC2cFragment(GreetingsC2cFragment greetingsC2cFragment) {
        }

        @Override
        public void injectHotelC2cFragment(HotelC2cFragment hotelC2cFragment) {
        }

        @Override
        public void injectNoConfigC2cFragment(NoConfigC2cFragment noConfigC2cFragment) {
        }

        @Override
        public void injectPlateRegistrationC2cFragment(
            PlateRegistrationC2cFragment plateRegistrationC2cFragment) {
        }

        @Override
        public void injectValidationResultsC2cFragment(
            ValidationResultsC2cFragment validationResultsC2cFragment) {
        }

        @Override
        public void injectVoucherC2cFragment(VoucherC2cFragment voucherC2cFragment) {
        }

        @Override
        public void injectEnterDateToGaFragment(EnterDateToGaFragment enterDateToGaFragment) {
        }

        @Override
        public void injectGreetingsGaFragment(GreetingsGaFragment greetingsGaFragment) {
        }

        @Override
        public void injectHotelGaFragment(HotelGaFragment hotelGaFragment) {
        }

        @Override
        public void injectNoConfigGaFragment(NoConfigGaFragment noConfigGaFragment) {
        }

        @Override
        public void injectPlateRegistrationGaFragment(
            PlateRegistrationGaFragment plateRegistrationGaFragment) {
        }

        @Override
        public void injectValidationResultsGaFragment(
            ValidationResultsGaFragment validationResultsGaFragment) {
        }

        @Override
        public void injectVoucherGaFragment(VoucherGaFragment voucherGaFragment) {
        }

        @Override
        public void injectEnterDateToHorizonFragment(
            EnterDateToHorizonFragment enterDateToHorizonFragment) {
        }

        @Override
        public void injectGreetingsHorizonFragmentGreetings(
            GreetingsHorizonFragmentGreetings greetingsHorizonFragmentGreetings) {
        }

        @Override
        public void injectHotelHorizonFragment(HotelHorizonFragment hotelHorizonFragment) {
        }

        @Override
        public void injectNoConfigHorizonFragment(NoConfigHorizonFragment noConfigHorizonFragment) {
        }

        @Override
        public void injectPlateRegistrationHorizonFragment(
            PlateRegistrationHorizonFragment plateRegistrationHorizonFragment) {
        }

        @Override
        public void injectValidationResultsHorizonFragment(
            ValidationResultsHorizonFragment validationResultsHorizonFragment) {
        }

        @Override
        public void injectVoucherFragmentHorizon(VoucherFragmentHorizon voucherFragmentHorizon) {
        }

        @Override
        public void injectLoginCheckerFragment(LoginCheckerFragment loginCheckerFragment) {
        }

        @Override
        public void injectLoginRegistrationFragment(
            LoginRegistrationFragment loginRegistrationFragment) {
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return activityCImpl.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI);
        }

        private static final class ViewWithFragmentCBuilder implements Application_HiltComponents.ViewWithFragmentC.Builder {
          private final DaggerApplication_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private View view;

          private ViewWithFragmentCBuilder(DaggerApplication_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;
          }

          @Override
          public ViewWithFragmentCBuilder view(View arg0) {
            this.view = Preconditions.checkNotNull(arg0);
            return this;
          }

          @Override
          public Application_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI, view);
          }
        }

        private static final class ViewWithFragmentCI extends Application_HiltComponents.ViewWithFragmentC {
          private final DaggerApplication_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private final ViewWithFragmentCI viewWithFragmentCI = this;

          private ViewWithFragmentCI(DaggerApplication_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI, View viewParam) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;


          }
        }
      }

      private static final class ViewCBuilder implements Application_HiltComponents.ViewC.Builder {
        private final DaggerApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private View view;

        private ViewCBuilder(DaggerApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public ViewCBuilder view(View arg0) {
          this.view = Preconditions.checkNotNull(arg0);
          return this;
        }

        @Override
        public Application_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(singletonC, activityRetainedCImpl, activityCImpl, view);
        }
      }

      private static final class ViewCI extends Application_HiltComponents.ViewC {
        private final DaggerApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final ViewCI viewCI = this;

        private ViewCI(DaggerApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            View viewParam) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;


        }
      }
    }

    private static final class ViewModelCBuilder implements Application_HiltComponents.ViewModelC.Builder {
      private final DaggerApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private SavedStateHandle savedStateHandle;

      private ViewModelCBuilder(DaggerApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle arg0) {
        this.savedStateHandle = Preconditions.checkNotNull(arg0);
        return this;
      }

      @Override
      public Application_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
      }
    }

    private static final class ViewModelCImpl extends Application_HiltComponents.ViewModelC {
      private final DaggerApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl = this;

      private volatile Provider<MainViewModel> mainViewModelProvider;

      private ViewModelCImpl(DaggerApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;


      }

      private MainViewModel mainViewModel() {
        return new MainViewModel(singletonC.apiResponseRepository(), singletonC.apiTwoResponseRepository(), singletonC.dBRepository());
      }

      private Provider<MainViewModel> mainViewModelProvider() {
        Object local = mainViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
          mainViewModelProvider = (Provider<MainViewModel>) local;
        }
        return (Provider<MainViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return Collections.<String, Provider<ViewModel>>singletonMap("com.sagoss.validationtesting.viewmodel.MainViewModel", (Provider) mainViewModelProvider());
      }

      private static final class SwitchingProvider<T> implements Provider<T> {
        private final DaggerApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ViewModelCImpl viewModelCImpl;

        private final int id;

        SwitchingProvider(DaggerApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.viewModelCImpl = viewModelCImpl;
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.sagoss.validationtesting.viewmodel.MainViewModel 
            return (T) viewModelCImpl.mainViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private static final class ServiceCBuilder implements Application_HiltComponents.ServiceC.Builder {
    private final DaggerApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service arg0) {
      this.service = Preconditions.checkNotNull(arg0);
      return this;
    }

    @Override
    public Application_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ServiceCImpl extends Application_HiltComponents.ServiceC {
    private final DaggerApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }
}
